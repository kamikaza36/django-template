{"version":3,"sources":["components/Scheduler/actions.js","components/Scheduler/index.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["toast","configure","serverIp","process","fetchOrders","a","axios","get","undefined","res","status","data","Error","error","postOrder","post","success","index","props","componentDidMount","then","setState","orders","prepareData","handleDateSelect","isModalOpen","handleClose","errorOrderName","errorClient","errorQuantity","errorStart","errorEnd","errorMachine","changeOrderName","e","order_name","target","value","changeClient","client","changeOrderQuantity","order_quantity","changeStartDate","order_start_date","changeEndDate","order_end_date","changeMachineName","machine","submitHandler","state","preventDefault","re","preparedData","map","event","id","title","start","end","newData","isLoading","this","orderNameStyle","borderColor","clientStyle","orderQuantityStyle","startStyle","endStyle","machineStyle","className","Spinner","animation","variant","Form","Group","Label","Control","size","as","onChange","handleClient","handleOrder","handleMachine","Button","onClick","handleRemoveFilter","Modal","show","onHide","Header","closeButton","Title","Body","type","placeholder","name","style","Footer","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","listPlugin","headerToolbar","left","center","right","events","initialView","editable","selectable","selectMirror","dayMaxEvents","select","Component","App","Scheduler","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4VAIAA,IAAMC,YAEN,IAAMC,EAAWC,wBAGJC,EAAW,uCAAG,4BAAAC,EAAA,+EAELC,IACfC,IADe,UACRL,EADQ,iBAFK,eAIJM,KAFbC,EAFiB,QAIfC,QAAuC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAmBD,EAAIE,KAJtG,sBAKf,IAAIC,MAAM,IALK,gCAOhBH,GAPgB,yDAShBT,IAAMa,MAAM,mEATI,yDAAH,qDAaXC,EAAS,uCAAG,WAAOH,GAAP,eAAAN,EAAA,+EAEHC,IACfS,KADe,UACPb,EADO,gBACiBS,GAHd,eAIFH,KAFbC,EAFe,QAIbC,QAAuC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,QAAiC,MAAfD,EAAIC,OAJjF,sBAKb,IAAIE,MAAM,IALG,cAOrBZ,IAAMgB,QAAQ,wBAPO,kBAQdP,GARc,2DAUdT,IAAMa,MAAM,6DAVE,0DAAH,sD,qBCiWPI,EAzWf,kDACE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsBRC,kBAAoB,WAClBf,IACGgB,MAAK,SAACX,GACL,EAAKY,SAAS,CACZC,OAASb,GAAOA,EAAIE,KAAQF,EAAIE,KAAO,KAEzC,EAAKY,kBA7BQ,EAiCnBC,iBAAmB,WACjB,EAAKH,SAAS,CACZI,aAAa,KAnCE,EAuCnBC,YAAc,WACZ,EAAKL,SAAS,CACZI,aAAa,EACbE,gBAAgB,EAChBC,aAAa,EACbC,eAAe,EACfC,YAAY,EACZC,UAAU,EACVC,cAAc,KA/CC,EAmDnBC,gBAAkB,SAACC,GACjB,EAAKb,SAAS,CACZc,WAAYD,EAAEE,OAAOC,MACrBV,gBAAgB,KAtDD,EA0DnBW,aAAe,SAACJ,GACd,EAAKb,SAAS,CACZkB,OAAQL,EAAEE,OAAOC,MACjBT,aAAa,KA7DE,EAiEnBY,oBAAsB,SAACN,GACrB,EAAKb,SAAS,CACZoB,eAAgBP,EAAEE,OAAOC,MACzBR,eAAe,KApEA,EAwEnBa,gBAAkB,SAACR,GACjB,EAAKb,SAAS,CACZsB,iBAAkBT,EAAEE,OAAOC,MAC3BP,YAAY,KA3EG,EA+EnBc,cAAgB,SAACV,GACf,EAAKb,SAAS,CACZwB,eAAgBX,EAAEE,OAAOC,MACzBN,UAAU,KAlFK,EAsFnBe,kBAAoB,SAACZ,GACnB,EAAKb,SAAS,CACZ0B,QAASb,EAAEE,OAAOC,MAClBL,cAAc,KAzFC,EA6FnBgB,cAAgB,SAACd,GACf,MAOI,EAAKe,MANPd,EADF,EACEA,WACAI,EAFF,EAEEA,OACAE,EAHF,EAGEA,eACAE,EAJF,EAIEA,iBACAE,EALF,EAKEA,eACAE,EANF,EAMEA,QAGFb,EAAEgB,iBAUGf,GAAeI,GAAWE,GAAmBE,GAAqBE,GAAmBE,EAY1FjC,EArBa,CACXqB,aACAI,SACAE,iBACAE,mBACAE,iBACAE,YAgBC3B,MAAK,WACJ,EAAKM,cACLtB,IACGgB,MAAK,SAAC+B,GACL,EAAK9B,SAAS,CACZC,OAAS6B,GAAMA,EAAGxC,KAAQwC,EAAGxC,KAAO,KAEtC,EAAKY,oBAnBX,EAAKF,SAAS,CACZM,gBAAgB,EAChBC,aAAa,EACbC,eAAe,EACfC,YAAY,EACZC,UAAU,EACVC,cAAc,KAxHD,EA0InBT,YAAc,WACZ,IAEM6B,EAFa,EAAKH,MAAhB3B,OAEoB+B,KAAI,SAACC,GAO/B,MANe,CACbC,GAAID,EAAMC,GACVC,MAAM,GAAD,OAAKF,EAAMf,OAAX,YAAqBe,EAAMnB,WAA3B,YAAyCmB,EAAMP,SACpDU,MAAO,sBACPC,IAAK,0BAKT,EAAKrC,SAAS,CACZsC,QAASP,EACTQ,WAAW,KAtJb,EAAKX,MAAQ,CACX3B,OAAQ,GACRqC,QAAS,GACTC,WAAW,EACXnC,aAAa,EACbU,WAAY,GACZI,OAAQ,GACRE,eAAgB,GAChBE,iBAAkB,GAClBE,eAAgB,GAChBE,QAAS,GACTpB,gBAAgB,EAChBC,aAAa,EACbC,eAAe,EACfC,YAAY,EACZC,UAAU,EACVC,cAAc,GAnBC,EADrB,0CA8JE,WACE,MAgBI6B,KAAKZ,MAfPU,EADF,EACEA,QACAC,EAFF,EAEEA,UACAnC,EAHF,EAGEA,YACAU,EAJF,EAIEA,WACAI,EALF,EAKEA,OACAE,EANF,EAMEA,eACAE,EAPF,EAOEA,iBACAE,EARF,EAQEA,eACAE,EATF,EASEA,QACApB,EAVF,EAUEA,eACAC,EAXF,EAWEA,YACAC,EAZF,EAYEA,cACAC,EAbF,EAaEA,WACAC,EAdF,EAcEA,SACAC,EAfF,EAeEA,aAGI8B,EAAiB,GACnBnC,IACFmC,EAAeC,YAAc,OAE/B,IAAMC,EAAc,GAChBpC,IACFoC,EAAYD,YAAc,OAE5B,IAAME,EAAqB,GACvBpC,IACFoC,EAAmBF,YAAc,OAEnC,IAAMG,EAAa,GACfpC,IACFoC,EAAWH,YAAc,OAE3B,IAAMI,EAAW,GACbpC,IACFoC,EAASJ,YAAc,OAEzB,IAAMK,EAAe,GAKrB,OAJIpC,IACFoC,EAAaL,YAAc,OAGzBH,EAEA,qBAAKS,UAAU,UAAf,SACE,cAACC,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,cAKxC,sBAAKH,UAAU,WAAf,UACE,qBAAKA,UAAU,mBAAf,SACE,sBAAKA,UAAU,2BAAf,UACE,wCACA,eAACI,EAAA,EAAKC,MAAN,CAAYL,UAAU,kCAAtB,UACE,cAACI,EAAA,EAAKE,MAAN,8BACA,cAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,KACLC,GAAG,SACHC,SAAUlB,KAAKmB,aAHjB,SAKE,oDAGJ,eAACP,EAAA,EAAKC,MAAN,CAAYL,UAAU,iCAAtB,UACE,cAACI,EAAA,EAAKE,MAAN,6BACA,cAACF,EAAA,EAAKG,QAAN,CAAcC,KAAK,KAAKC,GAAG,SAASC,SAAUlB,KAAKoB,YAAnD,SACE,oDAGJ,eAACR,EAAA,EAAKC,MAAN,CAAYL,UAAU,mCAAtB,UACE,cAACI,EAAA,EAAKE,MAAN,+BACA,cAACF,EAAA,EAAKG,QAAN,CACEC,KAAK,KACLC,GAAG,SACHC,SAAUlB,KAAKqB,cAHjB,SAKE,oDAGJ,cAACC,EAAA,EAAD,CAAQX,QAAQ,SAASY,QAASvB,KAAKwB,mBAAvC,gCAKJ,eAACC,EAAA,EAAD,CAAOC,KAAM9D,EAAa+D,OAAQ3B,KAAKnC,YAAvC,UACE,cAAC4D,EAAA,EAAMG,OAAP,CAAcC,aAAW,EAAzB,SACE,cAACJ,EAAA,EAAMK,MAAP,0BAEF,cAACL,EAAA,EAAMM,KAAP,UACE,eAACnB,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,yBACA,cAACF,EAAA,EAAKG,QAAN,CACEiB,KAAK,OACLC,YAAY,mBACZC,KAAK,aACL1D,MAAOF,EACP4C,SAAUlB,KAAK5B,gBACf+D,MAAOlC,OAIX,eAACW,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,qBACA,cAACF,EAAA,EAAKG,QAAN,CACEiB,KAAK,OACLC,YAAY,oBACZC,KAAK,SACL1D,MAAOE,EACPwC,SAAUlB,KAAKvB,aACf0D,MAAOhC,OAIX,eAACS,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,6BACA,cAACF,EAAA,EAAKG,QAAN,CACEiB,KAAK,SACLC,YAAY,uBACZC,KAAK,iBACL1D,MAAOI,EACPsC,SAAUlB,KAAKrB,oBACfwD,MAAO/B,OAIX,eAACQ,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,2BACA,cAACF,EAAA,EAAKG,QAAN,CACEiB,KAAK,OACLC,YAAY,qBACZC,KAAK,UACL1D,MAAOU,EACPgC,SAAUlB,KAAKf,kBACfkD,MAAO5B,OAIX,eAACK,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,yBACA,cAACF,EAAA,EAAKG,QAAN,CACEiB,KAAK,iBACLE,KAAK,mBACL1D,MAAOM,EACPoC,SAAUlB,KAAKnB,gBACfsD,MAAO9B,OAIX,eAACO,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,uBACA,cAACF,EAAA,EAAKG,QAAN,CACEiB,KAAK,iBACLE,KAAK,iBACL1D,MAAOQ,EACPkC,SAAUlB,KAAKjB,cACfoD,MAAO7B,YAKf,eAACmB,EAAA,EAAMW,OAAP,WACE,cAACd,EAAA,EAAD,CAAQX,QAAQ,YAAYY,QAASvB,KAAKnC,YAA1C,mBAGA,cAACyD,EAAA,EAAD,CACEX,QAAQ,UACRY,QAASvB,KAAKb,cAFhB,6BAQJ,qBAAKqB,UAAU,gBAAf,SACE,cAAC,IAAD,CACE6B,QAAS,CACPC,IACAC,IACAC,IACAC,KAEFC,cAAe,CACbC,KAAM,kBACNC,OAAQ,QACRC,MAAO,sCAETC,OAAQhD,EACRiD,YAAY,eACZC,UAAQ,EACRC,YAAU,EACVC,cAAY,EACZC,cAAY,EACZC,OAAQpD,KAAKrC,4BAjWzB,GAA2B0F,a,MCFZC,MARf,WACE,OACE,8BACE,cAACC,EAAD,OCOSC,EAdS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBnG,MAAK,YAEnB,IADLoG,EACI,EADJA,OAAQC,EACJ,EADIA,OAAQC,EACZ,EADYA,OAAQC,EACpB,EADoBA,OAAQC,EAC5B,EAD4BA,QAEhCJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2f46f3a9.chunk.js","sourcesContent":["import axios from 'axios';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\ntoast.configure();\n\nconst serverIp = process.env.REACT_APP_SERVER_IP;\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchOrders = async () => {\n  try {\n    const res = await axios\n      .get(`${serverIp}/api/orders/`);\n    if (res.status === undefined || res.status === 400 || res.status === 403 || res.status === 404 || res.status === 500 || !res.data) {\n      throw new Error('');\n    }\n    return res;\n  } catch {\n    return toast.error('Došlo je do pogreške prilikom dohvaćanja naloga');\n  }\n};\n\nexport const postOrder = async (data) => {\n  try {\n    const res = await axios\n      .post(`${serverIp}/api/orders/`, data);\n    if (res.status === undefined || res.status === 400 || res.status === 403 || res.status === 404 || res.status === 500) {\n      throw new Error('');\n    }\n    toast.success('Uspješno dodano');\n    return res;\n  } catch {\n    return toast.error('Došlo je do pogreške prilikom dodavanja naloga');\n  }\n};\n","import React, { Component } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Spinner from 'react-bootstrap/Spinner';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport listPlugin from '@fullcalendar/list';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { fetchOrders, postOrder } from './actions';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles.css';\n\nexport class index extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      orders: [],\n      newData: [],\n      isLoading: true,\n      isModalOpen: false,\n      order_name: '',\n      client: '',\n      order_quantity: '',\n      order_start_date: '',\n      order_end_date: '',\n      machine: '',\n      errorOrderName: false,\n      errorClient: false,\n      errorQuantity: false,\n      errorStart: false,\n      errorEnd: false,\n      errorMachine: false,\n    };\n  }\n\n  componentDidMount = () => {\n    fetchOrders()\n      .then((res) => {\n        this.setState({\n          orders: (res && res.data) ? res.data : [],\n        });\n        this.prepareData();\n      });\n  }\n\n  handleDateSelect = () => {\n    this.setState({\n      isModalOpen: true,\n    });\n  }\n\n  handleClose = () => {\n    this.setState({\n      isModalOpen: false,\n      errorOrderName: false,\n      errorClient: false,\n      errorQuantity: false,\n      errorStart: false,\n      errorEnd: false,\n      errorMachine: false,\n    });\n  }\n\n  changeOrderName = (e) => {\n    this.setState({\n      order_name: e.target.value,\n      errorOrderName: false,\n    });\n  }\n\n  changeClient = (e) => {\n    this.setState({\n      client: e.target.value,\n      errorClient: false,\n    });\n  }\n\n  changeOrderQuantity = (e) => {\n    this.setState({\n      order_quantity: e.target.value,\n      errorQuantity: false,\n    });\n  }\n\n  changeStartDate = (e) => {\n    this.setState({\n      order_start_date: e.target.value,\n      errorStart: false,\n    });\n  }\n\n  changeEndDate = (e) => {\n    this.setState({\n      order_end_date: e.target.value,\n      errorEnd: false,\n    });\n  }\n\n  changeMachineName = (e) => {\n    this.setState({\n      machine: e.target.value,\n      errorMachine: false,\n    });\n  }\n\n  submitHandler = (e) => {\n    const {\n      order_name,\n      client,\n      order_quantity,\n      order_start_date,\n      order_end_date,\n      machine,\n    } = this.state;\n\n    e.preventDefault();\n    const data = {\n      order_name,\n      client,\n      order_quantity,\n      order_start_date,\n      order_end_date,\n      machine,\n    };\n\n    if (!order_name || !client || !order_quantity || !order_start_date || !order_end_date || !machine) {\n      this.setState({\n        errorOrderName: true,\n        errorClient: true,\n        errorQuantity: true,\n        errorStart: true,\n        errorEnd: true,\n        errorMachine: true,\n      });\n      return;\n    }\n\n    postOrder(data)\n      .then(() => {\n        this.handleClose();\n        fetchOrders()\n          .then((re) => {\n            this.setState({\n              orders: (re && re.data) ? re.data : [],\n            });\n            this.prepareData();\n          });\n      });\n  }\n\n  prepareData = () => {\n    const { orders } = this.state;\n\n    const preparedData = orders.map((event) => {\n      const events = {\n        id: event.id,\n        title: `${event.client}/${event.order_name}/${event.machine}`,\n        start: '2021-04-01T10:00:00',\n        end: '2021-04-02T12:00:00',\n      };\n      return events;\n    });\n\n    this.setState({\n      newData: preparedData,\n      isLoading: false,\n    });\n  }\n\n  render() {\n    const {\n      newData,\n      isLoading,\n      isModalOpen,\n      order_name,\n      client,\n      order_quantity,\n      order_start_date,\n      order_end_date,\n      machine,\n      errorOrderName,\n      errorClient,\n      errorQuantity,\n      errorStart,\n      errorEnd,\n      errorMachine,\n    } = this.state;\n\n    const orderNameStyle = {};\n    if (errorOrderName) {\n      orderNameStyle.borderColor = 'red';\n    }\n    const clientStyle = {};\n    if (errorClient) {\n      clientStyle.borderColor = 'red';\n    }\n    const orderQuantityStyle = {};\n    if (errorQuantity) {\n      orderQuantityStyle.borderColor = 'red';\n    }\n    const startStyle = {};\n    if (errorStart) {\n      startStyle.borderColor = 'red';\n    }\n    const endStyle = {};\n    if (errorEnd) {\n      endStyle.borderColor = 'red';\n    }\n    const machineStyle = {};\n    if (errorMachine) {\n      machineStyle.borderColor = 'red';\n    }\n\n    if (isLoading) {\n      return (\n        <div className=\"spinner\">\n          <Spinner animation=\"border\" variant=\"primary\" />\n        </div>\n      );\n    }\n    return (\n      <div className=\"demo-app\">\n        <div className=\"demo-app-sidebar\">\n          <div className=\"demo-app-sidebar-section\">\n            <h2>Filter</h2>\n            <Form.Group className=\"demo-app-sidebar-section-client\">\n              <Form.Label>Sort by client:</Form.Label>\n              <Form.Control\n                size=\"sm\"\n                as=\"select\"\n                onChange={this.handleClient}\n              >\n                <option>Select...</option>\n              </Form.Control>\n            </Form.Group>\n            <Form.Group className=\"demo-app-sidebar-section-order\">\n              <Form.Label>Sort by order:</Form.Label>\n              <Form.Control size=\"sm\" as=\"select\" onChange={this.handleOrder}>\n                <option>Select...</option>\n              </Form.Control>\n            </Form.Group>\n            <Form.Group className=\"demo-app-sidebar-section-machine\">\n              <Form.Label>Sort by machine:</Form.Label>\n              <Form.Control\n                size=\"sm\"\n                as=\"select\"\n                onChange={this.handleMachine}\n              >\n                <option>Select...</option>\n              </Form.Control>\n            </Form.Group>\n            <Button variant=\"danger\" onClick={this.handleRemoveFilter}>\n              Remove filter\n            </Button>\n          </div>\n        </div>\n        <Modal show={isModalOpen} onHide={this.handleClose}>\n          <Modal.Header closeButton>\n            <Modal.Title>Add Event</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Form>\n              <Form.Group>\n                <Form.Label>Order name</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter order name\"\n                  name=\"order_name\"\n                  value={order_name}\n                  onChange={this.changeOrderName}\n                  style={orderNameStyle}\n                />\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>Client</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter client name\"\n                  name=\"client\"\n                  value={client}\n                  onChange={this.changeClient}\n                  style={clientStyle}\n                />\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>Order Quantity</Form.Label>\n                <Form.Control\n                  type=\"number\"\n                  placeholder=\"Enter order Quantity\"\n                  name=\"order_quantity\"\n                  value={order_quantity}\n                  onChange={this.changeOrderQuantity}\n                  style={orderQuantityStyle}\n                />\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>Machine name</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter Machine name\"\n                  name=\"machine\"\n                  value={machine}\n                  onChange={this.changeMachineName}\n                  style={machineStyle}\n                />\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>Start Date</Form.Label>\n                <Form.Control\n                  type=\"datetime-local\"\n                  name=\"order_start_date\"\n                  value={order_start_date}\n                  onChange={this.changeStartDate}\n                  style={startStyle}\n                />\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>End Date</Form.Label>\n                <Form.Control\n                  type=\"datetime-local\"\n                  name=\"order_end_date\"\n                  value={order_end_date}\n                  onChange={this.changeEndDate}\n                  style={endStyle}\n                />\n              </Form.Group>\n            </Form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleClose}>\n              Close\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={this.submitHandler}\n            >\n              Add event\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <div className=\"demo-app-main\">\n          <FullCalendar\n            plugins={[\n              dayGridPlugin,\n              timeGridPlugin,\n              interactionPlugin,\n              listPlugin,\n            ]}\n            headerToolbar={{\n              left: 'prev,next today',\n              center: 'title',\n              right: 'dayGridMonth,timeGridWeek,listWeek',\n            }}\n            events={newData}\n            initialView=\"dayGridMonth\"\n            editable\n            selectable\n            selectMirror\n            dayMaxEvents\n            select={this.handleDateSelect}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default index;\n","import React from 'react';\nimport Scheduler from './components/Scheduler';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <Scheduler />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}